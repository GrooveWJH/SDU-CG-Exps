实验 17 光照模型实例


1.	创建一个 MainWindow 程序，保留 ui 设计界面

2.	修改 MainWindow 的属性 windowTitle 为“光照模型”

3.	将 MainWindows 的尺寸设置为 650×450

4.	在 ui 中加入一个 groupBox，对象名称为 guoupBox_set，标题设为“设置面板”，尺寸为 170×410

5.	在设置面板 groupBox_set 中加入一个 checkBox，对象名称为 checkBox_lightEnable，文本标题为“启用光照”，位置为 x=20，y=20，宽度 70，高度 20

6.	在设置面板 groupBox_set 中加入一个 groupBox，对象名称为 groupBox_light，文本标题为“光照模式”，位置 x=10，y=50，宽度 150，高度 90

7.	在 groupBox_light 中 插 入 三 个 checkBox ， 对 象 名 称 为 checkBox_doubleFace 、checkBox_infinete、checkBox_global，文本为双面光照模式、无穷远光照模式、全场环境光模式

8.	插入一个光源颜色 guoupBox_lightColor，位置 x=10，y=150，宽度 150，高度 110

9.	在 guoupBox_lightColor 中插入三个 frame 控件，尺寸 50×20，名称为 frameColor_diffuse、frameColor_specular、frameColor_ambient，frameShape 为 Panel，frameShadow 为 Sunken， autoFillBackground 为 true

10.	打开 MainWindow.cpp，在构造函数中添加代码，设置光源颜色初始值

ui->frameColor_ambient->setPalette(QPalette(Qt::black));

ui->frameColor_diffuse->setPalette(QPalette(Qt::black));

ui->frameColor_specular->setPalette(QPalette(Qt::black));

11.	在 guoupBox_lightColor 中插入三个按钮：漫反射、镜面反射、环境光，对象名称为：pushButton_diffuse、pushButton_specular、pushButton_ambient，尺寸为 60×20

12.	在设置面板 groupBox_set 中加入一个 groupBox，对象名称为 groupBox_ material，文本为“物体材质”，尺寸为 150×50

13.	在 groupBox_ material 中加入一个 comboBox_material，尺寸为 70×20

14.	鼠标右击 comboBox_material，选择编辑项目，依次添加下拉项：默认值，红宝石，黄铜，青铜，白银，祖母绿

15.	在 ui 中加入一个 widget_draw，位置 x=186，y=10，尺寸 460×400
 

16.	新建一个 widgetDraw 类，基类为 QWidget，autoFillBackground 设为 true

17.	将 ui 中的 widget_draw 提升为 widgetDraw

18.	打开 widgetDraw 类的构造函数，添加一行代码 setPalette(QPalette(Qt::white));

19.	打开 MainWindow.h，加入

#include <QPainter>

20.	添加函数

void paintEvent(QPaintEvent*);

21.	在 MainWindow.cpp 中实现函数

void MainWindow::paintEvent(QPaintEvent*)

{

QPainter* ptr = new QPainter(this); ui->widget_draw->setFixedSize(width()-185, height()-20); delete ptr;

}

22.	打开 Lightdemo_cg13.pro 文件，添加代码

QT	+= opengl

LIBS += -lopengl32 -lglu32 -lglut

23.	在 widgetDraw.h 中添加

#include <QColor>

#include <QGLWidget>

#include <glut.h>

24.	修改 widgetDraw 类的基类及构造函数 class widgetDraw : public QGLWidget

widgetDraw::widgetDraw(QWidget *parent) : QGLWidget(parent)

25.	打开 widgetDraw.h 文件，为 widgetDraw 类添加成员

private:
 

bool lightEnable;

bool doubleFaceEnable;

bool infiniteEnable;

bool globalAmbientEnable;

QColor diffuseColor;

QColor specularColor;

QColor ambientColor;

int comboIndex;

public:

void setLightEnable(bool flag);

void setDoubleFaceEnable(bool flag); void setInfiniteEnable(bool flag); void setGlobalAmbientEnable(bool flag); void setDiffuseColor(QColor clr); void setSpecularColor(QColor clr); void setAmbientColor(QColor clr); void setComboIndex(int n);

void paintGL();

void colorChange(QColor clr, int mode); void render(int index);

void initLight();

void DrawScene();

26.	打开 widgetDraw.cpp 文件，实现各函数

#include "widgetdraw.h"

widgetDraw::widgetDraw(QWidget *parent) : QGLWidget(parent)

{

lightEnable = false;
 

doubleFaceEnable = false;

infiniteEnable = false;

globalAmbientEnable = false;

diffuseColor = QColor(Qt::black);

specularColor = QColor(Qt::white);

ambientColor = QColor(Qt::white);

comboIndex = -1;

setFormat(QGLFormat(QGL::DoubleBuffer | QGL::DepthBuffer));

}



void widgetDraw::setLightEnable(bool flag)

{

lightEnable = flag;

update();

}



void widgetDraw::setDoubleFaceEnable(bool flag)

{

doubleFaceEnable = flag;

update();

}



void widgetDraw::setInfiniteEnable(bool flag)

{

infiniteEnable = flag;

update();

}
 


void widgetDraw::setGlobalAmbientEnable(bool flag)

{

globalAmbientEnable = flag;

update();

}



void widgetDraw::setDiffuseColor(QColor clr)

{

diffuseColor = clr;

update();

}



void widgetDraw::setSpecularColor(QColor clr)

{

specularColor = clr;

update();

}



void widgetDraw::setAmbientColor(QColor clr)

{

ambientColor = clr;

update();

}



void widgetDraw::setComboIndex(int n)

{
 

comboIndex = n;

update();

}



void widgetDraw::paintGL()

{

glPolygonMode(GL_FRONT, GL_FILL);	// 设置绘图模式

glPolygonMode(GL_BACK, GL_FILL);

glShadeModel(GL_SMOOTH);	// 平滑处理模式

glEnable(GL_AUTO_NORMAL);

glEnable(GL_NORMALIZE);	// 开启自动单位化

glFrontFace(GL_CW);

glCullFace(GL_BACK);

initLight();	//初始化光照设置

glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

glClearColor(0.8f, 0.8f, 0.8f, 1.0);	// 设置背景颜色



glViewport(0, 0, width(), height());

glMatrixMode(GL_PROJECTION);

glLoadIdentity();

gluPerspective(30.0, 1.0, 1.0, 128.0);

glMatrixMode(GL_MODELVIEW);

glLoadIdentity();

gluLookAt(0.0, 10.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0); // 设置观察者位置、方向。

glDrawBuffer(GL_BACK);

glEnable(GL_DEPTH_TEST);
 

render(comboIndex);



if (lightEnable)

glEnable(GL_LIGHTING);

else

glDisable(GL_LIGHTING);



if (doubleFaceEnable)

glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);

else

glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE);



if (infiniteEnable)

glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_FALSE);// 远视

点

else

glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_TRUE); // 近视点



GLfloat model_ambient[] = { 1.0, 1.0, 1.0, 1.0 };

if (globalAmbientEnable)

{

glPushAttrib(GL_LIGHTING_BIT);

glLightModelfv(GL_LIGHT_MODEL_AMBIENT, model_ambient);

}

else

{

glPopAttrib();
 

colorChange(ambientColor, 1);

colorChange(diffuseColor, 2);

colorChange(specularColor, 3);

}



DrawScene();

}



void widgetDraw::colorChange(QColor clr, int mode)

{

GLfloat r, g, b;

r	= clr.redF();

g = clr.greenF(); b = clr.blueF(); switch (mode)

{

case 1:

{

GLfloat tempAmbient[] = { r, g, b, 1.0f }; glLightfv(GL_LIGHT0, GL_AMBIENT, tempAmbient); break;

}

case 2:

{

GLfloat tempDiffuse[] = { r, g, b, 1.0f }; glLightfv(GL_LIGHT0, GL_DIFFUSE, tempDiffuse); break;
 

}

case 3:

{

GLfloat tempSpecular[] = { r, g, b, 1.0f }; glLightfv(GL_LIGHT0, GL_SPECULAR, tempSpecular); break;

}

default:

break;

}

}



void widgetDraw::render(int index)

{

GLfloat m_MaterialAmbient[][4] = {

{ 0.2f,0.2f,0.2f,1.0f },

{ 0.25f,0.20725f,0.20725f,1.0f },

{ 0.33f,0.22f,0.028f,1.0f },

{ 0.05f,0.05f,0.0f,1.0f },

{ 0.25f,0.25f,0.25f,1.0f },

{ 0.02f,0.17f,0.02f,1.0f }

};



GLfloat m_MaterialDiffuse[][4] = {

{ 0.8f,0.8f,0.8f,1.0f },

{ 1.0f,0.829f,0.829f,1.0f },

{ 0.78f,0.57f,0.11f,1.0f },
 

{ 0.5f,0.5f,0.4f,1.0f },

{ 0.4f,0.4f,0.4f,1.0f },

{ 0.07f,0.61f,0.07f,1.0f }

};



GLfloat m_MaterialSpecular[][4] = {

{ 0.0f,0.0f,0.0f,1.0f },

{ 0.297f,0.297f,0.297f,1.0f },

{ 0.99f,0.94f,0.8f,1.0f },

{ 0.7f,0.7f,0.04f,1.0f },

{ 0.77f,0.77f,0.77f,1.0f },

{ 0.63f,0.73f,0.63f,1.0f }

};

// 高光系数，即镜面反射的指数

GLfloat m_MaterialShininess[] =

{ 0.0f,0.01f,0.22f,0.08f,0.6f,0.6f };




glMaterialfv(GL_FRONT, GL_AMBIENT, m_MaterialAmbient[index]); glMaterialfv(GL_FRONT, GL_DIFFUSE, m_MaterialDiffuse[index]); glMaterialfv(GL_FRONT, GL_SPECULAR, m_MaterialSpecular[index]); glMaterialf(GL_FRONT, GL_SHININESS, m_MaterialShininess[index] *

128.0f);

}



void widgetDraw::initLight()

{

GLfloat ambient[] = { 0.0f, 0.0f, 0.0f, 0.0f }; // 环境光颜色
 

GLfloat diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f }; // 漫反射颜色 GLfloat specular[] = { 1.0f, 1.0f, 1.0f, 1.0f }; // 镜面反射颜色 GLfloat light_pos[] = { 0.0f, 3.0f, 3.0f, 0.0f };// 光源位置 glClearDepth(1.0f);

glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); glLightfv(GL_LIGHT0, GL_SPECULAR, specular); glLightfv(GL_LIGHT0, GL_POSITION, light_pos);



glEnable(GL_LIGHT0);

// 激活光源 0

glEnable(GL_LIGHTING);

// 开启光照



}






void widgetDraw::DrawScene()

{

glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); glColor3f(0.0, 1.0, 0.0);

GLfloat m_BackDiffuse[] = { 0.8f,0.8f,0.8f,1.0f }; GLfloat m_emission[] = { 1.0f, 0.2f, 0.2f, 1.0f }; glMaterialfv(GL_BACK, GL_DIFFUSE, m_BackDiffuse);



glPushMatrix();

glFrontFace(GL_CW);
 

glMatrixMode(GL_MODELVIEW);

glLoadIdentity();

glTranslatef(1.5, 0.0, -15.0);

glRotatef(40.0f, 1.0f, 0.0f, 0.0f);

GLUquadricObj *objCylinder = gluNewQuadric();

gluCylinder(objCylinder, 1.6f,1.6f,1.4f,32,32);

glPopMatrix();



glFlush();

}

27.	打开 MainWindow.h 文件，添加数据成员

private:

QColor diffuseColor;

QColor specularColor;

QColor ambientColor;

28.	打开 MainWindow.cpp 文件，在 MainWindow 的构造函数中添加代码

ui->frameColor_diffuse->setPalette(QPalette(Qt::black));

ui->frameColor_specular->setPalette(QPalette(Qt::white));

ui->frameColor_ambient->setPalette(QPalette(Qt::white));

29.	鼠标右击各控件，添加槽函数

private slots:

void on_checkBox_lightEnable_stateChanged(int arg1); void on_checkBox_doubleFace_stateChanged(int arg1); void on_checkBox_infinite_stateChanged(int arg1); void on_checkBox_global_stateChanged(int arg1); void on_pushButton_diffuse_clicked(); void on_pushButton_specular_clicked();
 

void on_pushButton_ambient_clicked();

void on_comboBox_material_activated(int index);

30.	打开 MainWindow.cpp 文件，实现槽函数

void MainWindow::on_checkBox_lightEnable_stateChanged(int arg1)

{

if(arg1)

ui->widget_draw->setLightEnable(true);

else

ui->widget_draw->setLightEnable(false);

}



void MainWindow::on_checkBox_doubleFace_stateChanged(int arg1)

{

if(arg1)

ui->widget_draw->setDoubleFaceEnable(true);

else

ui->widget_draw->setDoubleFaceEnable(false);

}



void MainWindow::on_checkBox_infinite_stateChanged(int arg1)

{

if(arg1)

ui->widget_draw->setInfiniteEnable(true);

else

ui->widget_draw->setInfiniteEnable(false);

}
 

void MainWindow::on_checkBox_global_stateChanged(int arg1)

{

if(arg1)

ui->widget_draw->setGlobalAmbientEnable(true);

else

ui->widget_draw->setGlobalAmbientEnable(false);

}



void MainWindow::on_pushButton_diffuse_clicked()

{

diffuseColor =

QColorDialog::getColor(static_cast<int>(Qt::black));

ui->frameColor_diffuse->setPalette(QPalette(diffuseColor)); ui->widget_draw->setDiffuseColor(diffuseColor);

}



void MainWindow::on_pushButton_specular_clicked()

{

specularColor =

QColorDialog::getColor(static_cast<int>(Qt::black));

ui->frameColor_specular->setPalette(QPalette(specularColor)); ui->widget_draw->setSpecularColor(specularColor);

}



void MainWindow::on_pushButton_ambient_clicked()

{

ambientColor =

QColorDialog::getColor(static_cast<int>(Qt::black));
 

ui->frameColor_ambient->setPalette(QPalette(ambientColor)); ui->widget_draw->setAmbientColor(ambientColor);

}



void MainWindow::on_comboBox_material_activated(int index)

{

ui->widget_draw->setComboIndex(index);

}
